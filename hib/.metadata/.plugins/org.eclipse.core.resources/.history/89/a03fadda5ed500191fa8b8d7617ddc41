package com.jwt.controller;

import java.io.IOException;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.jboss.logging.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.jwt.model.Student;

public class ExamController {
	

		private static final Logger logger = Logger
				.getLogger(StudentController.class);

		public ExamController() {
			System.out.println("ExamController()");
		}

		@Autowired
		private com.jwt.service.ExamService ExamService;

		@RequestMapping(value = "/")
		public ModelAndView listStudent(ModelAndView model) throws IOException {
		
			model.addObject("listStudent", listStudent(null));
			logger.debug("debug:" +new Date() +this.getClass()+"listStudent()" +"student service calling is completed and no of students");

			model.setViewName("home");
			logger.debug("debug:" +new Date() +this.getClass()+"listStudent()" +"redirect to home");

			return model;
		}

		@RequestMapping(value = "/newExam", method = RequestMethod.GET)
		public ModelAndView newContact(ModelAndView model) {
			logger.debug("debug:" +new Date() +this.getClass()+"listStudent()" +"entering into");

			Student student = new Student();
			logger.debug("debug:" +new Date() +this.getClass()+"listStudent()" +"Calling the student service");

			model.addObject("student", student);
			logger.debug("debug:" +new Date() +this.getClass()+"listStudent()" +"student service calling is completed and no of students");

			model.setViewName("StudentForm");
			logger.debug("debug:" +new Date() +this.getClass()+"listStudent()" +"redirect to home");

			return model;
		}
		
		
		
		@RequestMapping(value = "/saveExam", method = RequestMethod.POST)
		public ModelAndView saveExam(@ModelAttribute Student student) {
			if (student.getId() == 0) { // if employee id is 0 then creating the
				// employee other updating the employee
				ExamService.addExam(student);
			} else {
				ExamService.updateExam(student);
			}
			return new ModelAndView("redirect:/");
		}

		@RequestMapping(value = "/deleteExam", method = RequestMethod.GET)
		public ModelAndView deleteStudent(HttpServletRequest request) {
			int examId = Integer.parseInt(request.getParameter("examId"));
			ExamService.deleteExam(examId);
			return new ModelAndView("redirect:/");
		}

		@RequestMapping(value = "/editExam", method = RequestMethod.GET)
		public ModelAndView editContact(HttpServletRequest request) {
			int examId= Integer.parseInt(request.getParameter("examid"));
			Student student = ExamService.getExam(examId);
			ModelAndView model = new ModelAndView("ExamForm");
			model.addObject("student", student);

			return model;
}}
