package com.jwt.controller;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.jwt.model.Exam;
import com.jwt.service.ExamService;

@Controller
public class ExamController {

private static final Logger logger = Logger
.getLogger(ExamController.class);

public ExamController() {
logger.info("ExamController");
System.out.println("ExamController()");
}

@Autowired
private ExamService examService;

//@RequestMapping(value = "/")
//public ModelAndView listExam(ModelAndView model) throws IOException {
//logger.info("Entering into the listExam method..");
//logger.info("Calling the exam service and its getAllExams..");
//List<Exam> listStudent = examService.getAllExams();
//model.addObject("listStudent", listStudent);
//model.setViewName("homeexam");
//return model;
//}

@RequestMapping(value = "/newExam", method = RequestMethod.GET)
public ModelAndView newContact1(HttpServletRequest request,ModelAndView model) {
Exam exam = new Exam();
exam.setSid(Integer.parseInt(request.getParameter("sid")));
model.addObject("exam", exam);
model.setViewName("ExamForm");
return model;
}
@RequestMapping(value = "/saveExam", method = RequestMethod.POST)
public ModelAndView saveExam(@ModelAttribute Exam exam) {
logger.debug("debug:" +new Date()+this.getClass()+ " saveExam()"+" Exam.sid "+ exam.getSid());
logger.debug("debug:" +new Date()+this.getClass()+ " " + exam.getSid() + " " + exam.getSubName() + "" + exam.getMarks());
System.out.println(exam.toString());
if (exam.getExamId() == 0) { // if employee id is 0 then creating the
// employee other updating the employee
examService.addExam(exam);
} else {
   examService.updateExam(exam);
}
return new ModelAndView("redirect:/");
}




@RequestMapping(value = "/showExam")
public ModelAndView listExam(HttpServletRequest request,ModelAndView model) throws IOException {
int sid = Integer.parseInt(request.getParameter("sid"));
// System.out.println("SID : " + sid);
logger.debug(new Date() +"  "+ this.getClass() + " Method name : listExam()" + " entering into method...");
logger.debug(new Date() +"  "+ this.getClass() + " Method name : listExam()" + " calling exam service...");
List<Exam> examList = (List<Exam>) examService.getExam(sid);
for (Exam exam : examList) {
System.out.println(exam.getExamId());
}
logger.debug(new Date() +"  "+ this.getClass() + " Method name : listExam()" + " getAllExam() successfuly executed ...no of exam received " +  examList.size());
model.addObject("sid",Integer.parseInt(request.getParameter("sid")));
model.addObject("examList", examList);
model.setViewName("ExamShow");
logger.debug(new Date() +"  "+ this.getClass() + " Method name : listExam()" + " redirecting to home ...");
return model;
}


@RequestMapping(value = "/deleteExam", method = RequestMethod.GET)
public ModelAndView deleteExam(HttpServletRequest request) {
logger.debug(new Date() +" Class : "+ this.getClass() + "Method name : deleteExam()" + " entering into method...");
logger.debug(new Date() +" Class : "+ this.getClass() + "Method name : newExam()" + " fetching exam id from request ...");
int examId = Integer.parseInt(request.getParameter("examId"));
logger.debug(new Date() +" Class : "+ this.getClass() + "Method name : newExam()" + " deleting exam ..."+ request.getParameter("id"));
examService.deleteExam(examId);
logger.debug(new Date() +" Class : "+ this.getClass() + "Method name : newExam()" + " redirecting to home ...");
return new ModelAndView("redirect:/");
}

@RequestMapping(value = "/editExam", method = RequestMethod.GET)
public ModelAndView editExam(HttpServletRequest request) {
logger.debug(new Date() +"  "+ this.getClass() + "Method name : editExam()" + " entering into method...");
int examId = Integer.parseInt(request.getParameter("examId"));
Exam exam = examService.getExam(examId);
ModelAndView model = new ModelAndView("ExamForm");
model.addObject("exam", exam);
return model;
}

}
